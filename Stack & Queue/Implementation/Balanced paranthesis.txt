Given string str containing just the characters '(', ')', '{', '}', '[' and ']', check if the input string is valid and return true if the string is balanced otherwise return false.


Example 1
Input: str = “()[{}()]”

Output: True

Explanation: As every open bracket has its corresponding close bracket. Match parentheses are in correct order hence they are balanced.

Example 2
Input: str = “[()”

Output: False

Explanation: As ‘[‘ does not have ‘]’ hence it is not valid and will return false.


Approach 1: 

bool isValid(string str) {

        stack<char> st;

        for(int i = 0;i< str.length(); i++){
            if((str[i] == ')' && !st.empty() && st.top() == '(') ||
               (str[i] == '}' && !st.empty() && st.top() == '{') || 
               (str[i] == ']' && !st.empty() && st.top() == '[')){
                st.pop();
            }
            else{
                st.push(str[i]);
            }
        }

        if(st.empty()) return true;
        else return false;
       
    }

TC : O(N)
SC : O(N)

Approach 2 :

 // to check if paranthesis match or not
    bool isMatched(char c1, char c2){

        if(c1 == '(' && c2 == ')') return true;
        if(c1 == '[' && c2 == ']') return true;
        if(c1 == '{' && c2 == '}') return true;

        return false;
    } 

    bool isValid(string s) {

        int top = -1; // everythign relies on this

        for(int i =0; i<s.length();i++){

            if(top < 0 || !isMatched(s[top], s[i]) ){
                top++;
                s[top] = s[i];            }
        
        else top--;
        }
        
        // if st is empty then true
        return top == -1;
    }

TC : O(N)
SC : O(1)