Given an m x n 2d array named matrix, where each cell is either 0 or 1. Return the number of unique ways to go from the top-left cell (matrix[0][0]) to the bottom-right cell (matrix[m-1][n-1]). A cell is blocked if its value is 1, and no path is possible through that cell.

Movement is allowed in only two directions from a cell - right and bottom.

Examples:
Input: matrix = [[0, 0, 0], [0, 1, 0], [0, 0, 0]]

Output: 2

Explanation: The two possible paths are:

1) down -> down-> right -> right

2) right -> right -> down -> down

RECURSIVE : 

class Solution {
   public:
    int helper(int i, int j, vector<vector<int>>& matrix) {
        // base case
        if (i >= 0 && j >= 0 && matrix[i][j] == 1)
            return 0;  // This will handle obstacle
        if (i == 0 && j == 0) return 1;

        if (i < 0 || j < 0) return 0;

        int up = helper(i - 1, j, matrix);
        int left = helper(i, j - 1, matrix);

        return up + left;
    }

    int uniquePathsWithObstacles(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();

        return helper(n - 1, m - 1, matrix);
    }
};

MEMOIZATION : 

class Solution {
   public:
    int helper(int i, int j, vector<vector<int>>& matrix,vector<vector<int>>& dp) {
        // base case
        if (i >= 0 && j >= 0 && matrix[i][j] == 1)
            return 0;  // This will handle obstacle
        if (i == 0 && j == 0) return 1;

        if (i < 0 || j < 0) return 0;

        if(dp[i][j] != -1) return dp[i][j];

        int up = helper(i - 1, j, matrix, dp );
        int left = helper(i, j - 1, matrix, dp);

        return dp[i][j] = up + left;
    }

    int uniquePathsWithObstacles(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();

        vector<vector<int>> dp(n, vector<int>(m,-1));

        return helper(n - 1, m - 1, matrix, dp);
    }
};

TABULATION : 

class Solution {
   public:
    int uniquePathsWithObstacles(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();

        vector<vector<int>> dp(n, vector<int>(m, 0));

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (matrix[i][j] == 1) {
                    dp[i][j] = 0;
                    continue;
                }

                if (i == 0 && j == 0) {
                    dp[i][j] = 1;
                    continue;
                }
                int up = 0;
                int left = 0;
                if (i > 0) up = dp[i - 1][j];
                if (j > 0) left = dp[i][j - 1];

                dp[i][j] = up + left;
            }
        }

        return dp[n - 1][m - 1];
    }
};

SPACE OPTIMIZATION :

class Solution {
   public:
    int uniquePathsWithObstacles(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();

        vector<int> prev(m, 0);

        for (int i = 0; i < n; i++) {
            vector<int> curr(m, 0);
            for (int j = 0; j < m; j++) {
                if (matrix[i][j] == 1) {
                    curr[j] = 0;
                    continue;
                }

                if (i == 0 && j == 0) {
                    curr[j] = 1;
                    continue;
                }
                int up = 0;
                int left = 0;
                if (i > 0) up = prev[j];
                if (j > 0) left = curr[j - 1];

                curr[j] = up + left;
            }
            prev = curr;
        }

        return prev[m - 1];
    }
};