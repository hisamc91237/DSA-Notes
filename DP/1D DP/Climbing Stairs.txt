Recursive Approach : 

class Solution {
public:
    int climbStairs(int n) {

        // base case
        if( n == 0 ) return 1;
        
        // edge case 
        if( n == 1) return 1;

        int oneStep = climbStairs(n - 1);
        int twoSteps = climbStairs(n - 2);

        return oneStep + twoSteps;

    }
};

TC : 2 to the power N
SC : o(N)

Memoization : 

class Solution {
public:

    int func(int n, vector<int> &dp) {
        // Base condition
        if (n <= 1) {
            return 1;
        }
        
        // Check if the subproblem is already solved
        if (dp[n] != -1) {
            return dp[n];
        }
        
        // Return the calculated value
        return dp[n] = func(n-1, dp) + func(n-2, dp);
    }

    int climbStairs(int n) {

        vector<int>dp (n + 1,-1);

        return func(n, dp );

    }
};

TC : O(N)
SC : o(N) + O (N)

Tabulation : 

class Solution {
public:

    int climbStairs(int n) {

        vector<int>dp (n + 1,-1); // dp array

        dp[0] = 1; // base case into use
        dp[1] = 1;

        for(int i=2;i <= n; i++){
            dp[i] = dp[i -1] + dp[i - 2];
        }

    return dp[n];
    }
};

TC : O(N)
SC : o(N) -> dp array space

Space optimization : 

class Solution {
public:

    int climbStairs(int n) {

        int prev = 1;
        int prev2 = 1;

        for(int i=2;i <= n; i++){
            int curr_i = prev2 + prev;
            prev2 = prev;
            prev = curr_i;
        }

    return prev;
    }
};

TC : O(N)
SC : o(1)

