Given a grid of size N x M (N is the number of rows and M is the number of columns in the grid) consisting of '0's (Water) and â€˜1's(Land). Find the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically or diagonally i.e., in all 8 directions.

Solution : 

class Solution {
   private:
    void bfs(int row, int col, vector<vector<int>> &vis,
             vector<vector<char>> &grid, int n, int m) {
        vis[row][col] = 1;
        queue<pair<int, int>> q;

        q.push({row, col});

        while (!q.empty()) {
            int row = q.front().first;
            int col = q.front().second;

            q.pop();

            // traverse in all 8 directions
            for (int delrow = -1; delrow <= 1; delrow++) {
                for (int delcol = -1; delcol <= 1; delcol++) {
                    int nrow = row + delrow;
                    int ncol = col + delcol;

                    // check validitiy
                    if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m &&
                        grid[nrow][ncol] == '1' && !vis[nrow][ncol]) {
                        vis[nrow][ncol] = 1;
                        q.push({nrow, ncol});
                    }
                }
            }
        }
    }

   public:
    int numIslands(vector<vector<char>> &grid) {
        int n = grid.size();
        int m = grid[0].size();

        // create a 2D vis array
        vector<vector<int>> vis(n, vector<int>(m, 0));

        int cnt = 0;

        // traverse in grid
        for (int row = 0; row < n; row++) {
            for (int col = 0; col < m; col++) {
                if (!vis[row][col] && grid[row][col] == '1') {
                    cnt++;
                    bfs(row, col, vis, grid, n, m);
                }
            }
        }
        return cnt;
    }
};

TC : O(N*M)

SC : O(N*M)