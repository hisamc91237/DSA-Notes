Given an undirected graph with V vertices. Two vertices u and v belong to a single province if there is a path from u to v or v to u. Find the number of provinces. The graph is given as an n x n matrix adj where adj[i][j] = 1 if the ith city and the jth city are directly connected, and adj[i][j] = 0 otherwise.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

Examples:

Input: adj=[ [1, 0, 0, 1], [0, 1, 1, 0], [0, 1, 1, 0], [1, 0, 0, 1] ]

Output: 2

Explanation:In this graph, there are two provinces: [1, 4] and [2, 3]. City 1 and city 4 have a path between them, and city 2 and city 3 also have a path between them. There is no path between any city in province 1 and any city in province 2.


Solution : 

class Solution {
    private:

    void dfs(int node, vector<int> adjLs[], int vis[]){
        vis[node] = 1;

        for(auto it : adjLs[node]){
            if(!vis[it]){
                dfs(it, adjLs, vis);
            }
        }
    }
   public:
    int numProvinces(vector<vector<int>> adj) {
        int V = adj.size();

        // convert adj matrix to adj list
        vector<int> adjLs[V];
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (adj[i][j] == 1 && i != j) {
                    adjLs[i].push_back(j);
                    adjLs[j].push_back(i);
                }
            }
        }

        int vis[V+1] = {0}; // create a vis array
        int cnt = 0;

        for(int i=0; i<V; i++){
            if(!vis[i]){
                cnt++;
                dfs(i, adjLs, vis);
            }
        }

        return cnt;

    }
};

TC : O(V + E)
SC : O(V + E)