Given an N x M binary matrix grid, where 0 represents a sea cell and 1 represents a land cell. A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid. Find the number of land cells in the grid for which we cannot walk off the boundary of the grid in any number of moves.

class Solution {
   private:
    void dfs(int row, int col, vector<vector<int>> &grid,
             vector<vector<int>> &vis, int delRow[], int delCol[]) {
        int n = grid.size();
        int m = grid[0].size();

        vis[row][col] = 1;
        for (int i = 0; i < 4; i++) {
            int nrow = row + delRow[i];
            int ncol = col + delCol[i];

            if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m &&
                grid[nrow][ncol] == 1 && !vis[nrow][ncol]) {
                dfs(nrow, ncol, grid, vis, delRow, delCol);
            }
        }
    }

   public:
    int numberOfEnclaves(vector<vector<int>> &grid) {
        int n = grid.size();
        int m = grid[0].size();

        vector<vector<int>> vis(n, vector<int>(m, 0));

        int delRow[] = {-1, 0, 1, 0};
        int delCol[] = {0, 1, 0, -1};

        int ans = 0;
        int cnt = 1;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {

                // doing dfs for the boundaries island
                if ((i == 0 || i == n - 1 || j == 0 || j == m - 1) && grid[i][j] == 1) {
                    dfs(i, j, grid, vis, delRow, delCol);
                }
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {

                // after dfs count the number of island
                if (grid[i][j] == 1 && !vis[i][j]) ans++;
            }
        }
        return ans;
    }
};
