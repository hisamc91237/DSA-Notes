Given the head of a singly linked list representing a positive integer number. Each node of the linked list represents a digit of the number, with the 1st node containing the leftmost digit of the number and so on. Check whether the linked list values form a palindrome or not. Return true if it forms a palindrome, otherwise, return false.



A palindrome is a sequence that reads the same forward and backwards.


Example 1
Input: head -> 3 -> 7 -> 5 -> 7 -> 3

Output: true

Explanation: 37573 is a palindrome.

Example 2
Input: head -> 1 -> 1 -> 2 -> 1

Output: false

Explanation: 1121 is not a palindrome.


Brute force : 

 bool isPalindrome(ListNode* head) {
        
        // stack to store elements
        stack<int> st;

        ListNode* temp = head;

        // Stroring elements in stack
        while(temp != NULL){
            st.push(temp -> val);
            temp = temp -> next;
        }

        // Loop to compare the elements
        temp = head;
        while(temp != NULL){
            if(temp -> val != st.top()) return false;
            st.pop();
            temp = temp -> next;
        }

        return true;
    }

TC : O(2N)
SC : O(N)


Optimal Approach : 


    //Function to reverse a LL
    ListNode* reverseLL(ListNode* head){
        
        if(head == NULL || head -> next == NULL) return head;

        ListNode* newHead = reverseLL(head -> next);

        ListNode* front = head -> next;
        front -> next = head;
        head -> next = NULL;

        return newHead;

    }

    bool isPalindrome(ListNode* head) {

        if(head == NULL || head -> next == NULL) return true;

        // Find the middle of LL
        ListNode* fast = head;
        ListNode* slow = head;

        while(fast -> next != NULL && fast -> next -> next != NULL){
            slow = slow -> next;
            fast = fast -> next -> next;
        }

        // Reverse from the middle of LL
        ListNode* newHead = reverseLL(slow -> next);

        ListNode* first = head;
        ListNode* second = newHead;

        // Compare both the LL pointers
        while(second != NULL){
            if(first -> val != second -> val){
                reverseLL(newHead);
                return false;
            }

            first = first -> next;
            second = second -> next;
        } 

        reverseLL(newHead);
        return true;       
    }