Given the head of a singly linked list. Reverse the given linked list and return the head of the modified list.


Example 1
Input: head -> 1 -> 2 -> 3 -> 4 -> 5

Output: head -> 5 -> 4 -> 3 -> 2 -> 1

Explanation: All the links are reversed and the head now points to the last node of the original list.

Example 2
Input: head -> 6 -> 8

Output: head -> 8 -> 6

Explanation: All the links are reversed and the head now points to the last node of the original list.

This can be seen like: 6 <- 8 <- head.

Example 3
Input: head -> 1

Output:
head -> 1


Iterative Approach : 

ListNode* reverseList(ListNode* head) {

        //Edge case
        if(head == NULL || head -> next == NULL) return head;

        ListNode* temp = head;
        ListNode* prev = NULL;
        ListNode* front = temp -> next;

        // Loop to reverse a LL
        while(temp != NULL){
            temp -> next = prev;
            prev = temp;
            temp = front;

            if(front)front = front -> next;
        }
        return prev;
    }

TC : O(N)

Recursive Appraoch : 

ListNode* reverseList(ListNode* head) {
        
         //Base case
        if(head == NULL || head -> next == NULL) return head;

        ListNode* newHead = reverseList(head -> next);
        ListNode* front = head -> next;
        front -> next = head;
        head -> next = NULL;
        return newHead;
        
    }


TC : O(N)
SC : O(N)