Given the head of a singly linked list containing integers, reverse the nodes of the list in groups of k and return the head of the modified list. If the number of nodes is not a multiple of k, then the remaining nodes at the end should be kept as is and not reversed.

Do not change the values of the nodes, only change the links between nodes.


Example 1
Input: head -> 1 -> 2 -> 3 -> 4 -> 5, k = 2

Output: head -> 2 -> 1 -> 4 -> 3 -> 5

Explanation: The groups 1 -> 2 and 3 -> 4 were reversed as 2 -> 1 and 4 -> 3.

Example 2
Input: head -> 1 -> 2 -> 3 -> 4 -> 5, k = 3

Output: head -> 3 -> 2 -> 1 -> 4 -> 5

Explanation: The groups 1 -> 2 -> 3 were reversed as 3 -> 2 -> 1.

Note that 4 -> 5 was not reversed.

Approach : 

 // Function to reverse LL
    ListNode* reverseLinkedList(ListNode* head){

        ListNode* temp = head;
        ListNode* prev = NULL;

        while(temp){
            ListNode* front = temp -> next;
            temp -> next = prev;
            prev = temp;
            temp = front;
        }
        return prev;
    }

    // Function to find kth Node
    ListNode* findKthNode(ListNode* head, int k){

        k -= 1;
        ListNode* temp = head;

        while(temp && k > 0){
            k--;
            temp = temp -> next;
        }
        return temp; // if no ther is no k group temp will return NULL;
    }

    ListNode* reverseKGroup(ListNode* head, int k) {

        if(head == NULL || head -> next == NULL) return head;

        ListNode* prevNode = NULL;
        ListNode* nextNode = NULL;
        ListNode* temp = head;

        while(temp){
            
            // kthNode
            ListNode* kthNode = findKthNode(temp, k);

            // if it is null then there is no k group left;
            if(kthNode == NULL){
                
                // check if prevnode is there (edge case)
                if(prevNode) prevNode -> next = temp;
                break;
            }
            
            // preserve nextNode before breaking the LL for reverse
            nextNode = kthNode -> next;
            kthNode -> next = NULL;

            // reverse k linked list
            reverseLinkedList(temp);

            // only in first iteration
            if(temp == head) head = kthNode;
            else{
                 prevNode -> next = kthNode; // connect both the LL
            }
    
            prevNode = temp;
            temp = nextNode;
        }
        return head;
    }

TC : O(2N)
SC : O(1)