Given the head of a special linked list of n nodes where each node contains an additional pointer called 'random' which can point to any node in the list or null.



Construct a deep copy of the linked list where,

n new nodes are created with corresponding values as original linked list.
The random pointers point to the corresponding new nodes as per their arrangement in the original list.
Return the head of the newly constructed linked list.


Note: For custom input, a n x 2 matrix is taken with each row having 2 values:[ val, random_index] where,

val: an integer representing ListNode.val
random_index: index of the node (0 - n-1) that the random pointer points to, otherwise -1.

Example 1
Input: [[1, -1], [2, 0], [3, 4], [4, 1], [5, 2]]

Output: 1 2 3 4 5, true

Explanation: All the nodes in the new list have same corresponding values as original nodes.

All the random pointers point to their corresponding nodes in the new list.

'true' represents that the nodes and references were created new.

Example 2
Input: [[5, -1], [3, -1], [2, 1], [1, 1]]

Output: 5 3 2 1, true

Explanation: All the nodes in the new list have same corresponding values as original nodes.

All the random pointers point to their corresponding nodes in the new list.

'true' represents that the nodes and references were created new.


Brute Force : 

  ListNode* copyRandomList(ListNode* head) {
        // If the head is null, return null
        if (!head) return NULL;

        /*Create an unordered_map to map 
        original nodes to their corresponding copied nodes*/
        unordered_map<ListNode*, ListNode*> mpp;
        ListNode* temp = head;

        // Create copies of each node
        while (temp != NULL) {
            // Create new node with same value as original
            ListNode* newNode = new ListNode(temp->val);
            // Map to original node 
            mpp[temp] = newNode;
            // Move to next node
            temp = temp->next;
        }

        // Reset temp 
        temp = head;

        /*Connect the next and 
        random pointers of the 
        copied nodes using the map*/
        while (temp != NULL) {
            // Get copied node from the map
            ListNode* copyNode = mpp[temp];
            /*Set next pointer of copied node 
            to the copied node of the next 
            original node*/
            copyNode->next = mpp[temp->next];
            /*Set the random pointer of the 
            copied node to the copied node of 
            the random original node*/
            copyNode->random = mpp[temp->random];
            temp = temp->next;
        }

        // Return the head
        return mpp[head];
    }

TC : O(2N)
SC : O(2N)



Optimal : 

 // Insert a copy of each node in between the original nodes
    void insertCopyInBetween(ListNode* head) {
        ListNode* temp = head;
        while (temp != NULL) {
            ListNode* nextElement = temp->next;
            // Create a new node with the same data
            ListNode* copy = new ListNode(temp->val);
            
            copy->next = nextElement;
            
            temp->next = copy;
            
            temp = nextElement;
        }
    }

    // Function to connect random pointers of the copied nodes
    void connectRandomPointers(ListNode* head) {
        ListNode* temp = head;
        while (temp != NULL) {
            // Access the copied node
            ListNode* copyNode = temp->next;
            
            /*If the original node has a random pointer
            point the copied node's random to the 
            corresponding copied random node
            set the copied node's random to null 
            if the original random is null*/
            if (temp->random) {
                
                copyNode->random = temp->random->next;
            } else {
                
                copyNode->random = NULL;
            }
            
            // Move to next original node
            temp = temp->next->next;
        }
    }

    // Function to retrieve the deep copy of the linked list
    ListNode* getDeepCopyList(ListNode* head) {
        ListNode* temp = head;
        // Create a dummy node
        ListNode* dummyNode = new ListNode(-1);
        // Initialize a result pointer
        ListNode* res = dummyNode;

        while (temp != NULL) {
            /*Creating a new List by 
            pointing to copied nodes*/
            res->next = temp->next;
            res = res->next;

            /*Disconnect and revert back 
            to the initial state of the 
            original linked list*/
            temp->next = temp->next->next;
            temp = temp->next;
        }
        
        /*Return the deep copy 
        of the list starting 
        from the dummy node*/
        return dummyNode->next;
    }

    // Function to clone the linked list
    ListNode* copyRandomList(ListNode* head) {
        // If the original list is empty, return null
        if (!head) return nullptr;

        // Insert nodes in between
        insertCopyInBetween(head);
        // Connect random pointers
        connectRandomPointers(head);
        // Retrieve deep copy of inked list
        return getDeepCopyList(head);
    }


TC : O(3N)
SC : O(N)